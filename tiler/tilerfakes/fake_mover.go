// Code generated by counterfeiter. DO NOT EDIT.
package tilerfakes

import (
	"os"
	"sync"

	"github.com/starkandwayne/om-tiler/pattern"
	"github.com/starkandwayne/om-tiler/tiler"
)

type FakeMover struct {
	CacheStub        func(pattern.PivnetFile) error
	cacheMutex       sync.RWMutex
	cacheArgsForCall []struct {
		arg1 pattern.PivnetFile
	}
	cacheReturns struct {
		result1 error
	}
	cacheReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(pattern.PivnetFile) (*os.File, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 pattern.PivnetFile
	}
	getReturns struct {
		result1 *os.File
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *os.File
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMover) Cache(arg1 pattern.PivnetFile) error {
	fake.cacheMutex.Lock()
	ret, specificReturn := fake.cacheReturnsOnCall[len(fake.cacheArgsForCall)]
	fake.cacheArgsForCall = append(fake.cacheArgsForCall, struct {
		arg1 pattern.PivnetFile
	}{arg1})
	fake.recordInvocation("Cache", []interface{}{arg1})
	fake.cacheMutex.Unlock()
	if fake.CacheStub != nil {
		return fake.CacheStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cacheReturns
	return fakeReturns.result1
}

func (fake *FakeMover) CacheCallCount() int {
	fake.cacheMutex.RLock()
	defer fake.cacheMutex.RUnlock()
	return len(fake.cacheArgsForCall)
}

func (fake *FakeMover) CacheCalls(stub func(pattern.PivnetFile) error) {
	fake.cacheMutex.Lock()
	defer fake.cacheMutex.Unlock()
	fake.CacheStub = stub
}

func (fake *FakeMover) CacheArgsForCall(i int) pattern.PivnetFile {
	fake.cacheMutex.RLock()
	defer fake.cacheMutex.RUnlock()
	argsForCall := fake.cacheArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMover) CacheReturns(result1 error) {
	fake.cacheMutex.Lock()
	defer fake.cacheMutex.Unlock()
	fake.CacheStub = nil
	fake.cacheReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMover) CacheReturnsOnCall(i int, result1 error) {
	fake.cacheMutex.Lock()
	defer fake.cacheMutex.Unlock()
	fake.CacheStub = nil
	if fake.cacheReturnsOnCall == nil {
		fake.cacheReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cacheReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMover) Get(arg1 pattern.PivnetFile) (*os.File, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 pattern.PivnetFile
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMover) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeMover) GetCalls(stub func(pattern.PivnetFile) (*os.File, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeMover) GetArgsForCall(i int) pattern.PivnetFile {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMover) GetReturns(result1 *os.File, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeMover) GetReturnsOnCall(i int, result1 *os.File, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeMover) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cacheMutex.RLock()
	defer fake.cacheMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMover) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tiler.Mover = new(FakeMover)
